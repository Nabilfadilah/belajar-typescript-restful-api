// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// user model - video 103
model User {
  username String  @id @db.VarChar(100)
  password String  @db.VarChar(100)
  name     String  @db.VarChar(100)
  token    String? @db.VarChar(100)

  // relasi
  contacts Contact[]

  @@map("users")
}

// contact model - video 104
// relasi satu ke banyak = one to many (satu user dapat memiliki banyak contact)
model Contact {
  id         Int     @id @default(autoincrement())
  first_name String  @db.VarChar(100)
  last_name  String? @db.VarChar(100)
  email      String? @db.VarChar(100)
  phone      String? @db.VarChar(20)
  username   String  @db.VarChar(100)

  // relasi
  user      User      @relation(fields: [username], references: [username])
  addresses Address[]

  @@map("contacts")
}

// address model - video 105
model Address {
  id          Int     @id @default(autoincrement())
  street      String? @db.VarChar(255)
  city        String? @db.VarChar(100)
  province    String? @db.VarChar(100)
  country     String  @db.VarChar(100)
  postal_code String  @db.VarChar(10)

  // address ini milik contact id siapa dan relasi ke kontak, disatu kontak dapat memiliki banyak address
  contact_id Int

  // relasi
  contact Contact @relation(fields: [contact_id], references: [id])

  @@map("addresses")
}
